import logging
import google.generativeai as palm
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

# Configurez l'API de Google Gemini
palm.configure(api_key=open('token.txt').read().strip())

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Define the states for the conversation
ANSWERING_QUESTIONS = range(7)

# Define the questions
questions = [
    "Quel est votre nom et pr√©nom ?",
    "Pouvez-vous me parler un peu de vous et de votre parcours √©ducatif ?",
    "Quel programme sp√©cifique postulez-vous √† l'universit√© ?",
    "Qu'est-ce qui vous a inspir√© √† poursuivre des √©tudes dans ce domaine particulier ?",
    "Quelles comp√©tences et qualit√©s poss√©dez-vous qui font de vous un candidat solide pour ce programme ?",
]

answers = {}

# Define the command handler for starting the conversation


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    if user_id not in answers:
        answers[user_id] = []

    welcome_message = (
        "Bonjour et bienvenue sur  ProHtech bot! üéì\n\n"
        "Si vous envisagez de postuler √† des universit√©s au Maroc et avez besoin d'aide pour r√©diger une lettre de motivation, vous √™tes au bon endroit ! ProHtech bot est l√† pour vous assister.\n\n"
        "Je vais vous poser quelques questions sur votre parcours, vos r√©alisations et vos motivations. Ensuite, je vais g√©n√©rer une lettre de motivation personnalis√©e juste pour vous. C'est parti !\n\n"
        "Pour commencer, veuillez me donner votre nom et pr√©nom :"
    )
    await update.message.reply_text(welcome_message)
    return ANSWERING_QUESTIONS


async def ask_questions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    question_number = len(answers[user_id])

    if question_number < len(questions):
        if question_number == 0:
            await update.message.reply_text(questions[question_number])
        else:
            personalized_question = questions[question_number]
            await update.message.reply_text(personalized_question)

        return ANSWERING_QUESTIONS
    else:
        return await generate_motivational_letter(update, context)


async def receive_answers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    answers[user_id].append(update.message.text)
    return await ask_questions(update, context)


async def generate_motivational_letter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id

    # Construct the prompt
    prompt = "√âcrire une lettre de motivation en fran√ßais destin√©e au bureau des admissions d'une universit√©, bas√©e sur les informations suivantes. Assurez-vous d'inclure mon nom √† la fin de la lettre :\n\n"
    for i, question in enumerate(questions):
        prompt += f"{questions[i]}\nAnswer: {answers[user_id][i]}\n\n"

    messages = [
        {"role": "system", "content": "Vous √™tes un assistant utile, comp√©tent en r√©daction de lettres de motivation."},
        {"role": "user", "content": prompt}
    ]

    # Use Gemini API to generate the rest of the letter
    model = palm.GenerativeModel('gemini-1.5-flash')
    try:
        response = model.generate_content(
            f"""√âcrire une lettre de motivation en fran√ßais destin√©e au bureau des admissions d'une universit√©, bas√©e sur les informations suivantes
         {messages} Assurez-vous d'inclure mon nom √† la fin de la lettre :\n\n
         Vous √™tes un assistant utile, comp√©tent en r√©daction de lettres de motivation """
        )
        letter = response.text.strip()
        await update.message.reply_text("Merci pour vos r√©ponses. Voici votre lettre de motivation :\n\n" + letter)

    except Exception as e:
        await update.message.reply_text(f"Une erreur s'est produite lors de la g√©n√©ration de la lettre : {e}")

        # Clear user's answers
    del answers[user_id]
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    if user_id in answers:
        del answers[user_id]
    await update.message.reply_text('Conversation annul√©e.')
    return ConversationHandler.END


def main():
    # Set up the Telegram bot
    application = ApplicationBuilder().token(
        "token telegram ici").build()

    # Define the conversation handler
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ANSWERING_QUESTIONS: [MessageHandler(
                filters.TEXT & ~filters.COMMAND, receive_answers)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conversation_handler)

    # Start the bot
    application.run_polling()


if __name__ == '__main__':
    main()
